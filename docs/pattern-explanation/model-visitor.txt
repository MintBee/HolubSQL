# Db Insert/Delete visitor
Visitor 패턴을 이용하여 Db에 각 어플리케이션 모델은 Insert하고 Delete하는 오퍼레이션을 구현하였습니다. 이러한 패턴을 이용한 이유는 다음과 같은 이유가 있습니다.

1. 모델들과 관련된 오퍼레이션이었지만, 모델 클래스에 넣으면 cohesion을 해치는 동작들을 구현하고 싶었다.
저희는 이 Visitor들을 처음부터 Db와 관련된 오퍼레이션들을 쉽게 하기 위해 고안을 했습니다. 그러나 DB에 관련된 Data Access 동작들은 어플리케이션 모델들과 같은 클래스 안에 있기에는 모델 클래스들의 cohesion을 해치게 됩니다. 모델은 비즈니스 로직의 부분이기 때문입니다. 그렇기에, 이미 Repository가 각 모델들에 대해 있음에도 불구하고, DB 접근을 편하게 하기 위해 DB 접근 관련 Visitor들을 구현하게 되었습니다.

2. 어플리케이션 모델이 변하지 않을 것이라는 확신이 있었다.
저희는 처음에 도메인 모델 분석 및, 유스케이스 분석을 통해 어플리케이션의 기능을 확실히 정해놓았습니다. 그렇기 때문에 도메인 모델들의 구조가 변하지 않을 것이라는 확신이 있었습니다.

- Visited
com.designpattern.model.Product
com.designpattern.model.Stock

Visitor를 accept하는 모델들

- Visitor
com/designpattern/model/ModelVisitor
Visitor 인터페이스
com.designpattern.model.DbDeleteVisitor
모델들을 db에서 삭제하는 기능의 visitor
com.designpattern.model.DbInsertVisitor
모델들을 db에 추가하는 기능의 visitor
